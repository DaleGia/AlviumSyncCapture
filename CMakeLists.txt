cmake_minimum_required(VERSION 3.13)
if(COMMAND cmake_policy)
      cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)
include(CMakePrintHelpers)

project(AlviumSyncCapture LANGUAGES CXX)
set (CMAKE_CXX_FLAGS "-lstdc++fs -std=c++17 -O2")
# set(CMAKE_BUILD_TYPE Debug)

# Add source files for executable 1
set(AlviumSyncCapture_SOURCES
    AlviumSyncCapture.cpp
    GUIControl.cpp
    AlliedVisionAlvium/AlliedVisionAlvium.cpp
    AlliedVisionAlvium/PPSSync.cpp
    AlliedVisionAlvium/GNSS.cpp
    PolCam.cpp)
add_executable(AlviumSyncCapture ${AlviumSyncCapture_SOURCES})

set(AlviumSyncDetect_SOURCES
    AlviumSyncDetect.cpp
    GUIDetect.cpp
    AlliedVisionAlvium/AlliedVisionAlvium.cpp
    AlliedVisionAlvium/AlliedVisionAlviumPPSSync.cpp
    AlliedVisionAlvium/PPSSync.cpp
    AlliedVisionAlvium/GNSS.cpp
    PolCam.cpp)
add_executable(AlviumSyncDetect ${AlviumSyncDetect_SOURCES})

# # Add source files for executable 1
set(POLTEST_SOURCES
    test/PolCamTest.cpp
    PolCam.cpp)
add_executable(PolCamTest ${POLTEST_SOURCES})

set(POLPROCESS_SOURCES
    test/PolCamProcess.cpp
    PolCam.cpp)
add_executable(PolCamProcess ${POLPROCESS_SOURCES})

#########################ALLIED VISION VIMBAX STUFF ####################
# add hardcoded guesses for the location of Vmb to CMAKE_PREFIX_PATH
list(APPEND CMAKE_PREFIX_PATH "/usr/local/lib/VimbaX/api")
list(APPEND CMAKE_PREFIX_PATH "/usr/local/lib/VimbaX/api/include/")
list(APPEND CMAKE_PREFIX_PATH "/usr/local/lib/VimbaX/api/include/VmbCPP/")
list(APPEND CMAKE_PREFIX_PATH "/usr/local/lib/VimbaX/api/include/VmbImageTransform/")
list(APPEND CMAKE_PREFIX_PATH "/usr/local/lib/VimbaX/lib/")
list(APPEND CMAKE_PREFIX_PATH "/usr/local/lib/VimbaX/lib/cmake/")
find_package(Vmb REQUIRED COMPONENTS CPP)
find_package(Vmb REQUIRED COMPONENTS ImageTransform)
target_link_libraries(AlviumSyncCapture nanogui Vmb::CPP)
target_link_libraries(AlviumSyncCapture nanogui Vmb::ImageTransform)
target_link_libraries(AlviumSyncDetect nanogui Vmb::CPP)
target_link_libraries(AlviumSyncDetect nanogui Vmb::ImageTransform)

############## nanogui STUFF ########################################
# Disable building extras we won't need (pure C++ project)
set(NANOGUI_BUILD_EXAMPLE OFF CACHE BOOL " " FORCE)
set(NANOGUI_BUILD_PYTHON  OFF CACHE BOOL " " FORCE)
set(NANOGUI_INSTALL       OFF CACHE BOOL " " FORCE)
set(NANOGUI_USE_GLAD      OFF CACHE BOOL " " FORCE)

# Add the configurations from nanogui
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/nanogui)

# For reliability of parallel build, make the NanoGUI targets dependencies
set_property(TARGET glfw glfw_objects nanogui PROPERTY FOLDER "dependencies")

# Various preprocessor definitions have been generated by NanoGUI
add_definitions(${NANOGUI_EXTRA_DEFS})

# On top of adding the path to nanogui/include, you may need extras
include_directories(${NANOGUI_EXTRA_INCS})
include_directories(nanogui/include)

# Lastly, additional libraries may have been built for you.  In addition to linking
# against NanoGUI, we need to link against those as well.
target_link_libraries(AlviumSyncCapture nanogui ${NANOGUI_EXTRA_LIBS})
target_link_libraries(AlviumSyncDetect nanogui ${NANOGUI_EXTRA_LIBS})

############## OpenCV STUFF ########################################
find_package(OpenCV REQUIRED )
include_directories( ${OpenCV_INCLUDE_DIRS} )
target_link_libraries(AlviumSyncCapture ${OpenCV_LIBS} )
target_link_libraries(AlviumSyncDetect ${OpenCV_LIBS} )
target_link_libraries(PolCamTest ${OpenCV_LIBS} )
target_link_libraries(PolCamProcess ${OpenCV_LIBS} )

##################################################################

############## GPSD STUFF ########################################
# - Find GPSD
# Find the native GPSD includes and library

FIND_PATH(GPSD_INCLUDE_DIR libgpsmm.h gps.h)

SET(GPSD_NAMES ${GPSD_NAMES} gps)
FIND_LIBRARY(GPSD_LIBRARY NAMES ${GPSD_NAMES} )

# handle the QUIETLY and REQUIRED arguments and set JPEG_FOUND to TRUE if 
# all listed variables are TRUE
INCLUDE(FindPackageHandleStandardArgs)
FIND_PACKAGE_HANDLE_STANDARD_ARGS(GPSD DEFAULT_MSG GPSD_LIBRARY GPSD_INCLUDE_DIR)

IF(GPSD_FOUND)
  SET(GPSD_LIBS ${GPSD_LIBRARY})
  message(STATUS "Found libgps: ${GPSD_LIBRARIES}")
ENDIF(GPSD_FOUND)

include_directories( ${GPSD_INCLUDE_DIRS} )
target_link_libraries(AlviumSyncCapture ${GPSD_LIBS} )
target_link_libraries(AlviumSyncDetect ${GPSD_LIBS} )

##################################################################

############## cfitsio ############################################
target_link_libraries(AlviumSyncCapture  "cfitsio")
target_link_libraries(AlviumSyncDetect "cfitsio")
target_link_libraries(PolCamTest "cfitsio")
target_link_libraries(PolCamProcess "cfitsio")
